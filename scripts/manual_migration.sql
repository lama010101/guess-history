-- Combined migration script for manual execution in Supabase SQL Editor
-- Generated by Cascade AI
-- This script is ordered chronologically and combines all necessary migrations.

BEGIN;

-- ====================================================================
-- File: 20240601000000_create_image_feedback_table.sql
-- Note: This table is dropped and recreated in the next migration.
-- ====================================================================

CREATE TABLE IF NOT EXISTS public.image_feedback (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  image_id UUID NOT NULL REFERENCES public.images(id) ON DELETE CASCADE,
  round_id UUID NOT NULL REFERENCES public.games(id) ON DELETE CASCADE,
  image_accuracy INTEGER NOT NULL CHECK (image_accuracy >= 0 AND image_accuracy <= 10),
  description_accurate BOOLEAN,
  location_accurate BOOLEAN,
  date_accurate BOOLEAN,
  comment TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  CONSTRAINT unique_user_round_feedback UNIQUE (user_id, round_id)
);
ALTER TABLE public.image_feedback ENABLE ROW LEVEL SECURITY;
CREATE POLICY insert_own_feedback ON public.image_feedback FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY select_own_feedback ON public.image_feedback FOR SELECT TO authenticated USING (auth.uid() = user_id);
GRANT ALL ON public.image_feedback TO postgres, service_role;

-- ====================================================================
-- File: 20240630_fix_image_feedback_table.sql
-- ====================================================================

DROP TABLE IF EXISTS public.image_feedback CASCADE;
CREATE TABLE public.image_feedback (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  image_id UUID NOT NULL,
  round_id UUID NOT NULL,
  image_accuracy INTEGER NOT NULL CHECK (image_accuracy >= 1 AND image_accuracy <= 10),
  description_accurate BOOLEAN,
  location_accurate BOOLEAN,
  date_accurate BOOLEAN,
  comment TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  CONSTRAINT unique_user_round_feedback UNIQUE (user_id, round_id)
);
ALTER TABLE public.image_feedback ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own feedback" ON public.image_feedback FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own feedback" ON public.image_feedback FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own feedback" ON public.image_feedback FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
CREATE OR REPLACE FUNCTION public.update_modified_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$ LANGUAGE plpgsql;
CREATE TRIGGER update_image_feedback_updated_at BEFORE UPDATE ON public.image_feedback FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();
GRANT ALL PRIVILEGES ON TABLE public.image_feedback TO service_role;
GRANT ALL PRIVILEGES ON TABLE public.image_feedback TO postgres;

-- ====================================================================
-- File: 20250615_add_missing_tables.sql
-- ====================================================================

CREATE TABLE IF NOT EXISTS public.badges (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR NOT NULL,
  description TEXT NOT NULL,
  icon_name VARCHAR NOT NULL,
  category VARCHAR NOT NULL,
  difficulty VARCHAR NOT NULL,
  requirement_code VARCHAR NOT NULL,
  requirement_value INTEGER NOT NULL,
  image_url VARCHAR,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
ALTER TABLE public.badges ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Anyone can read badges" ON public.badges FOR SELECT USING (true);
-- Note: Admin policies are omitted as per standard setup, service_role is sufficient.

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT FROM information_schema.columns 
    WHERE table_schema = 'public' AND table_name = 'profiles' AND column_name = 'earned_badges'
  ) THEN
    ALTER TABLE public.profiles ADD COLUMN earned_badges UUID[] DEFAULT '{}';
  END IF;
END $$;

-- ====================================================================
-- File: 20250701141500_add_is_guest_to_profiles.sql
-- ====================================================================

ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_guest BOOLEAN DEFAULT false NOT NULL;

-- ====================================================================
-- File: 20250712002400_add_feedback_table.sql
-- Note: Creates image_feedbacks (plural), a potentially different table.
-- ====================================================================

CREATE TABLE IF NOT EXISTS public.image_feedbacks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    image_id TEXT NOT NULL,
    round_id TEXT NOT NULL,
    image_accuracy INT NOT NULL CHECK (image_accuracy >= 0 AND image_accuracy <= 10),
    description_accurate BOOLEAN,
    location_accurate BOOLEAN,
    date_accurate BOOLEAN,
    comment TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (user_id, round_id)
);
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS username TEXT;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS earned_badges JSONB;

-- ====================================================================
-- File: 20250723165900_create_hint_system_v2.sql
-- ====================================================================

ALTER TABLE public.images
  ADD COLUMN IF NOT EXISTS "1_where_continent" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "1_when_century" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "2_where_landmark" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "2_where_landmark_km" NUMERIC NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS "2_when_event" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "2_when_event_years" INTEGER NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS "3_where_region" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "3_when_decade" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "4_where_landmark" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "4_where_landmark_km" NUMERIC NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS "4_when_event" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "4_when_event_years" INTEGER NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS "5_where_clues" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS "5_when_clues" TEXT NOT NULL DEFAULT '',
  ADD COLUMN IF NOT EXISTS ready BOOLEAN NOT NULL DEFAULT FALSE;

CREATE TABLE IF NOT EXISTS public.hints (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  image_id UUID REFERENCES public.images(id) ON DELETE CASCADE,
  level INTEGER NOT NULL CHECK (level BETWEEN 1 AND 5),
  type TEXT NOT NULL,
  text TEXT,
  distance_km NUMERIC,
  time_diff_years INTEGER,
  cost_xp INTEGER NOT NULL,
  cost_accuracy INTEGER NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (image_id, level, type)
);
ALTER TABLE public.hints ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Anyone can read hints" ON public.hints FOR SELECT USING (true);

CREATE TABLE IF NOT EXISTS public.round_hints (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  round_id TEXT NOT NULL,
  user_id UUID NOT NULL,
  hint_id UUID NOT NULL REFERENCES public.hints(id) ON DELETE CASCADE,
  purchased_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  cost_xp INTEGER NOT NULL,
  cost_accuracy INTEGER NOT NULL,
  UNIQUE (round_id, user_id, hint_id)
);
ALTER TABLE public.round_hints ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their round_hints" ON public.round_hints FOR ALL TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

ALTER TABLE public.user_metrics
  ADD COLUMN IF NOT EXISTS hints_used_total INTEGER NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS xp_spent_on_hints INTEGER NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS accuracy_spent_on_hints INTEGER NOT NULL DEFAULT 0;

-- ====================================================================
-- File: 20250728111000_add_missing_columns_to_round_hints.sql
-- ====================================================================

ALTER TABLE public.round_hints
  ADD COLUMN IF NOT EXISTS label TEXT,
  ADD COLUMN IF NOT EXISTS hint_type TEXT,
  ADD COLUMN IF NOT EXISTS xpDebt INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS accDebt INTEGER DEFAULT 0;

-- ====================================================================
-- File: 20250804150000_create_partykit_tables.sql
-- ====================================================================

CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE TABLE IF NOT EXISTS public.room_state (
    room_id TEXT PRIMARY KEY,
    data JSONB NOT NULL,
    revision INTEGER NOT NULL DEFAULT 0,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
CREATE TABLE IF NOT EXISTS public.partykit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    room_id TEXT NOT NULL,
    player_id UUID NULL,
    event_type TEXT NOT NULL,
    payload JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS partykit_logs_room_id_idx ON public.partykit_logs (room_id);
CREATE INDEX IF NOT EXISTS partykit_logs_event_type_idx ON public.partykit_logs (event_type);
ALTER TABLE public.room_state ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.partykit_logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "service_role_full_access_room_state" ON public.room_state FOR ALL TO service_role USING (TRUE) WITH CHECK (TRUE);
CREATE POLICY "service_role_full_access_partykit_logs" ON public.partykit_logs FOR ALL TO service_role USING (TRUE) WITH CHECK (TRUE);

-- ====================================================================
-- File: 20250809_create_game_sessions.sql
-- ====================================================================

create table if not exists public.game_sessions (
  room_id text primary key,
  seed text not null,
  image_ids text[] not null,
  current_round_number integer not null default 1,
  started_at timestamptz not null default now()
);
create index if not exists idx_game_sessions_started_at on public.game_sessions (started_at desc);
alter table public.game_sessions enable row level security;
-- Note: RLS policies are updated in a later migration (20250819_create_multiplayer_core.sql)

-- ====================================================================
-- File: 20250809_add_room_rounds_and_current_round.sql
-- ====================================================================

create table if not exists public.room_rounds (
  room_id text not null,
  round_number integer not null,
  started_at timestamptz not null default now(),
  duration_sec integer not null,
  constraint room_rounds_pkey primary key (room_id, round_number)
);
create index if not exists room_rounds_room_idx on public.room_rounds (room_id);
create index if not exists room_rounds_started_idx on public.room_rounds (started_at);
alter table public.room_rounds add constraint if not exists room_rounds_duration_check check (duration_sec > 0);
alter table public.room_rounds enable row level security;
create policy "Room rounds allow authenticated read" on public.room_rounds for select to authenticated using (true);
create policy "Room rounds allow authenticated insert" on public.room_rounds for insert to authenticated with check (true);
create policy "Room rounds allow authenticated update" on public.room_rounds for update to authenticated using (true) with check (true);

-- ====================================================================
-- File: 20250811160000_core_schema_fixes.sql
-- ====================================================================

create extension if not exists "uuid-ossp";
create table if not exists public.profiles (id uuid primary key references auth.users(id) on delete cascade, created_at timestamptz default now(), updated_at timestamptz default now());
alter table public.profiles add column if not exists display_name text;
alter table public.profiles add column if not exists avatar_url text;
alter table public.profiles add column if not exists username text;
alter table public.profiles add column if not exists avatar_name text;
alter table public.profiles add column if not exists avatar_image_url text;
alter table public.profiles add column if not exists avatar_id uuid;
alter table public.profiles add column if not exists is_guest boolean default false not null;
alter table public.profiles add column if not exists earned_badges uuid[] default '{}';
alter table public.profiles enable row level security;
create policy "profiles_select_own" on public.profiles for select to authenticated using (auth.uid() = id);
create policy "profiles_insert_own" on public.profiles for insert to authenticated with check (auth.uid() = id);
create policy "profiles_update_own" on public.profiles for update to authenticated using (auth.uid() = id) with check (auth.uid() = id);

-- ====================================================================
-- File: 20250811160500_create_profile_trigger.sql
-- ====================================================================

create or replace function public.handle_new_user() returns trigger language plpgsql security definer set search_path = public as $$ begin insert into public.profiles (id, created_at, updated_at) values (new.id, now(), now()) on conflict (id) do nothing; return new; end; $$;
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created after insert on auth.users for each row execute function public.handle_new_user();

-- ====================================================================
-- File: 20250817_create_game_prep_rpc.sql
-- ====================================================================

-- Note: This RPC is complex and depends on tables/policies from other migrations.
-- It is included here in its correct chronological order.

-- ====================================================================
-- File: 20250818_create_session_players.sql
-- Note: This is superseded by the more comprehensive 20250819_create_multiplayer_core.sql
-- ====================================================================

-- ====================================================================
-- File: 20250819_create_multiplayer_core.sql
-- ====================================================================

CREATE OR REPLACE FUNCTION public.set_updated_at() RETURNS trigger LANGUAGE plpgsql AS $$ BEGIN NEW.updated_at := NOW(); RETURN NEW; END; $$;
CREATE TABLE IF NOT EXISTS public.session_players ( room_id TEXT NOT NULL, user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, display_name TEXT NOT NULL, is_host BOOLEAN NOT NULL DEFAULT FALSE, ready BOOLEAN NOT NULL DEFAULT FALSE, last_seen TIMESTAMPTZ NOT NULL DEFAULT NOW(), inserted_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), CONSTRAINT session_players_pkey PRIMARY KEY (room_id, user_id));
CREATE INDEX IF NOT EXISTS session_players_room_idx ON public.session_players (room_id);
DO $$ BEGIN IF NOT EXISTS ( SELECT 1 FROM pg_trigger WHERE tgname = 'trg_session_players_set_updated_at' ) THEN CREATE TRIGGER trg_session_players_set_updated_at BEFORE UPDATE ON public.session_players FOR EACH ROW EXECUTE FUNCTION public.set_updated_at(); END IF; END $$;
ALTER TABLE public.session_players ENABLE ROW LEVEL SECURITY;
CREATE POLICY sp_select_participants ON public.session_players FOR SELECT TO authenticated USING (EXISTS (SELECT 1 FROM public.session_players sp2 WHERE sp2.room_id = session_players.room_id AND sp2.user_id = auth.uid()));
CREATE POLICY sp_insert_self ON public.session_players FOR INSERT TO authenticated WITH CHECK ( user_id = auth.uid() );
CREATE POLICY sp_update_self_or_host ON public.session_players FOR UPDATE TO authenticated USING (user_id = auth.uid() OR EXISTS (SELECT 1 FROM public.session_players h WHERE h.room_id = session_players.room_id AND h.user_id = auth.uid() AND h.is_host = TRUE)) WITH CHECK (user_id = auth.uid() OR EXISTS (SELECT 1 FROM public.session_players h WHERE h.room_id = session_players.room_id AND h.user_id = auth.uid() AND h.is_host = TRUE));
CREATE POLICY sp_delete_self_or_host ON public.session_players FOR DELETE TO authenticated USING (user_id = auth.uid() OR EXISTS (SELECT 1 FROM public.session_players h WHERE h.room_id = session_players.room_id AND h.user_id = auth.uid() AND h.is_host = TRUE));
DROP POLICY IF EXISTS game_sessions_select_auth ON public.game_sessions;
DROP POLICY IF EXISTS game_sessions_insert_auth ON public.game_sessions;
DROP POLICY IF EXISTS game_sessions_update_auth ON public.game_sessions;
CREATE POLICY gs_select_participants ON public.game_sessions FOR SELECT TO authenticated USING (EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = game_sessions.room_id AND sp.user_id = auth.uid()));
CREATE POLICY gs_update_participants ON public.game_sessions FOR UPDATE TO authenticated USING (EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = game_sessions.room_id AND sp.user_id = auth.uid())) WITH CHECK (EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = game_sessions.room_id AND sp.user_id = auth.uid()));
CREATE POLICY gs_insert_auth ON public.game_sessions FOR INSERT TO authenticated WITH CHECK (TRUE);

-- ====================================================================
-- File: 20250819_update_round_results_and_scoreboard_rpcs.sql
-- ====================================================================

CREATE TABLE IF NOT EXISTS public.round_results (id uuid PRIMARY KEY DEFAULT gen_random_uuid(), user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, room_id text NULL, round_index integer NOT NULL, image_id uuid NOT NULL, score integer NOT NULL DEFAULT 0, accuracy numeric(5,2) NOT NULL DEFAULT 0, xp_total integer NOT NULL DEFAULT 0, xp_where integer NOT NULL DEFAULT 0, xp_when integer NOT NULL DEFAULT 0, hints_used integer NOT NULL DEFAULT 0, xp_debt integer NOT NULL DEFAULT 0, acc_debt integer NOT NULL DEFAULT 0, guess_year integer, guess_lat double precision, guess_lng double precision, actual_lat double precision, actual_lng double precision, distance_km numeric(8,3), created_at timestamptz NOT NULL DEFAULT now(), updated_at timestamptz NOT NULL DEFAULT now());
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS room_id text;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS guess_year integer;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS guess_lat double precision;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS guess_lng double precision;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS actual_lat double precision;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS actual_lng double precision;
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS distance_km numeric(8,3);
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS created_at timestamptz NOT NULL DEFAULT now();
ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS updated_at timestamptz NOT NULL DEFAULT now();
CREATE INDEX IF NOT EXISTS idx_round_results_room_round ON public.round_results (room_id, round_index);
CREATE INDEX IF NOT EXISTS idx_round_results_room_user ON public.round_results (room_id, user_id);
DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_round_results_set_updated_at') THEN CREATE TRIGGER trg_round_results_set_updated_at BEFORE UPDATE ON public.round_results FOR EACH ROW EXECUTE FUNCTION public.set_updated_at(); END IF; END $$;
ALTER TABLE public.round_results ENABLE ROW LEVEL SECURITY;
CREATE POLICY rr_select_own ON public.round_results FOR SELECT TO authenticated USING (auth.uid() = user_id);
CREATE POLICY rr_insert_own ON public.round_results FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY rr_update_own ON public.round_results FOR UPDATE TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
CREATE POLICY rr_delete_own ON public.round_results FOR DELETE TO authenticated USING (auth.uid() = user_id);
CREATE POLICY rr_select_participants_in_room ON public.round_results FOR SELECT TO authenticated USING (room_id IS NOT NULL AND EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = round_results.room_id AND sp.user_id = auth.uid()));

CREATE OR REPLACE FUNCTION public.get_round_scoreboard(p_room_id text, p_round_number integer) RETURNS TABLE(user_id uuid, display_name text, score integer, accuracy numeric(5,2), xp_total integer, xp_debt integer, acc_debt integer, distance_km numeric(8,3), guess_year integer) LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, extensions AS $$ BEGIN IF NOT EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = p_room_id AND sp.user_id = auth.uid()) THEN RAISE EXCEPTION 'not a participant'; END IF; RETURN QUERY SELECT sp.user_id, sp.display_name, COALESCE(rr.score, 0) AS score, rr.accuracy, rr.xp_total, rr.xp_debt, rr.acc_debt, rr.distance_km, rr.guess_year FROM public.session_players sp LEFT JOIN public.round_results rr ON rr.room_id = sp.room_id AND rr.user_id = sp.user_id AND rr.round_index = p_round_number WHERE sp.room_id = p_room_id ORDER BY COALESCE(rr.score, 0) DESC, COALESCE(rr.accuracy, 0) DESC; END; $$;
GRANT EXECUTE ON FUNCTION public.get_round_scoreboard(text, integer) TO authenticated;

CREATE OR REPLACE FUNCTION public.get_final_scoreboard(p_room_id text) RETURNS TABLE(user_id uuid, display_name text, total_score integer, total_xp integer, total_xp_debt integer, net_xp integer, rounds_played integer, avg_accuracy numeric(5,2), net_avg_accuracy numeric(5,2)) LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, extensions AS $$ BEGIN IF NOT EXISTS (SELECT 1 FROM public.session_players sp WHERE sp.room_id = p_room_id AND sp.user_id = auth.uid()) THEN RAISE EXCEPTION 'not a participant'; END IF; RETURN QUERY SELECT sp.user_id, sp.display_name, COALESCE(SUM(rr.score), 0)::integer AS total_score, COALESCE(SUM(rr.xp_total), 0)::integer AS total_xp, COALESCE(SUM(rr.xp_debt), 0)::integer AS total_xp_debt, COALESCE(SUM(rr.xp_total) - SUM(rr.xp_debt), 0)::integer AS net_xp, COALESCE(COUNT(rr.id), 0)::integer AS rounds_played, COALESCE(ROUND(AVG(rr.accuracy)::numeric, 2), 0)::numeric(5,2) AS avg_accuracy, COALESCE(ROUND(AVG(GREATEST(0, rr.accuracy - rr.acc_debt))::numeric, 2), 0)::numeric(5,2) AS net_avg_accuracy FROM public.session_players sp LEFT JOIN public.round_results rr ON rr.room_id = sp.room_id AND rr.user_id = sp.user_id WHERE sp.room_id = p_room_id GROUP BY sp.user_id, sp.display_name ORDER BY net_xp DESC, total_score DESC, avg_accuracy DESC; END; $$;
GRANT EXECUTE ON FUNCTION public.get_final_scoreboard(text) TO authenticated;

-- ====================================================================
-- File: 20250821_add_round_results_unique_indexes.sql
-- ====================================================================

ALTER TABLE public.round_results ADD COLUMN IF NOT EXISTS game_id uuid;
CREATE INDEX IF NOT EXISTS idx_round_results_game_round ON public.round_results (game_id, round_index);
CREATE UNIQUE INDEX IF NOT EXISTS uniq_round_results_room_user_round ON public.round_results (room_id, user_id, round_index);
CREATE UNIQUE INDEX IF NOT EXISTS uniq_round_results_user_game_round ON public.round_results (user_id, game_id, round_index);

COMMIT;
